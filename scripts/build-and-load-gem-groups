#!/bin/bash -e

# Filename: build-and-load-gem-groups
# Purpose:  Install gems based on groups in your Gemfile; Load gems based on those groups. 
# Author:   Lex Sheehan
# License:  MIT

# Set default values
ALL_GROUPS= # Set to bypass group lookup in Gemfile
VENDOR_PATH="$(if [ "$VENDOR_PATH" != "" ]; then echo $VENDOR_PATH; else echo './bin'; fi)"
CONFIG_DIR="$(if [ "$CONFIG_DIR" != "" ]; then echo $CONFIG_DIR; else echo '/tmp'; fi)"
USE_LAST_LOCK_FILE="$(if [ "$USE_LAST_LOCK_FILE" != "" ]; then echo $USE_LAST_LOCK_FILE; else echo "false"; fi)"
RAILS_ENV="$(if [ "$RAILS_ENV" != "" ]; then echo $RAILS_ENV; else echo 'development'; fi)"
LOAD_ENV_PATH="$(if [ "$LOAD_ENV_PATH" != "" ]; then echo $LOAD_ENV_PATH; else echo './script/load_environment.rb'; fi)"

Usage() 
{
	info="
Usage: $(basename $0) [-i group names] | [-e group names] | [-a] | [-d] | [-l] | [-r] | [-t]

Options:
	-i or --include             Groups to include in build and load
	-e or --exclude             Groups to exclude in build and load
	-a or --all-groups          Include all groups in build and load
	-d or --display-groups      Display all groups in Gemfile
	-r or --clear-all           Clear bundler and gemfile settings and remove vendor dir
	-t or --test-load-time      Display how long it takes to load
	-l or --show-load-path      Display Ruby load path
	-c or --show-bundle-config  Display bundle config file contents
	-s or --save-config         Currently only saves Gemile.lock file
	-g or --last-gem-lock-file  Display path of last saved Gemile.lock file
	
	
Examples:
$(basename $0) -i app development
$(basename $0) -i app test
$(basename $0) -i app production
$(basename $0) -i assets
$(basename $0) -i deploy
RAILS_GROUPS=development $(basename $0) -t
SKIP_BUILD=true build-and-load-gem-groups -i development
SKIP_LOAD=true $(basename $0) -i production
LOAD_ENV_PATH=./scripts/load-env.rb  $(basename $0) -i development

Notes:
* A better, albeit longer name of this script: 'build_and_time_the_loading_of_gem_groups'
* - If group passed 'test' then 'rake rspec' will be run otherwise run load_environment.rb.
* In practice, you should set the RAILS_GROUPS before you run your Ruby code. [Optional] 
* Set env var SKIP_BUILD=true to skip the build portion of this script. [Optional] 
* Set env var SKIP_LOAD=true to skip the load portion of this script. [Optional] 
* Set env var LOAD_ENV_PATH='path to where load_environment.rb path. [Optional] 
* Run 'bundle info <GEM_NAME>' for info about installed gem. Ex: $ bundle info json
* Running $ $(basename $0) -i assets  fails to load the rails environment as expected 
    because will likely be missing gems required to load a full rails environment.
* Running $ $(basename $0) -i development  when RAILS_ENV=production may fail with:
  'cannot load such file -- uglifier'  
  'cannot load such file -- scruffy'  
  'cannot load such file -- newrelic_rpm'
  That is expected. In order to build a development package in production you must run:
  $ build-and-load-gem-groups -i development app assets production
* Just because you can do something, does not mean you _should_ do it.
* If you see an error like the following, then install the test group passing '-i test'
  'cannot load such file -- shoulda/matchers'
* If you see an error like the following after an --i operation, then install it's group
  'cannot load such file -- ruby-hl7'
  Assming its group is 'app', then run '$(basename $0) -i test app'
  
Current environment variable settings:
SKIP_BUILD=$SKIP_BUILD
SKIP_LOAD=$SKIP_LOAD
LOAD_ENV_PATH=$LOAD_ENV_PATH
RAILS_ENV=$RAILS_ENV
"
	echo "$info"
	exit 2
}	

restore_opts() 
{
	case $- in
	  *e*) OLDOPTS="$OLDOPTS; set -e";;
	  *) OLDOPTS="$OLDOPTS; set +e";;
	esac
}
include_param_passed=false
parse_arguments() 
{
	if [ "${DEBUG}" == "true" ]; then
		echo "++ $(basename $0) $@"
	fi
	
	while [ $# -gt 0 ]; do
		case $1 in
			--help | -h)
				HELPINFO=true;;
			--include | -i)
				include_param_passed=true
                shift || true
				INCLUDES="$@";;
			--exclude | -e)
                shift
				EXCLUDES="$@";;
			--all-groups | -a)
				INCLUDE_ALL_GROUPS=true;;
			--all-groups | -a)
				INCLUDE_ALL_GROUPS=true;;
			--show-bundle-config | -c)
				DISPLAY_BUNDLE_CONFIG=true;;
			--display_all_groups | -d)
				DISPLAY_ALL_GROUPS=true;;
			--last-gem-lock-file | -g)
				LAST_GEM_LOCK_FILE=true;;
			--load-path | -l)
				LOAD_PATH=true;;
			--clear | -r)
				CLEAR_ALL=true;;
			--save-config | -s)
				SAVE_CONFIG=true;;
			--test-load-time | -t)
				TEST_LOAD_TIME=true;;
		esac
		shift || true
	done
}
# Set default values; leave empty if you want user to specify its value.
parse_arguments $@

if [ "${INCLUDES}" == "" ] && \
	[ "${EXCLUDES}" == "" ] && \
	[ "${INCLUDE_ALL_GROUPS}" == "" ] && \
	[ "${DISPLAY_ALL_GROUPS}" == "" ] && \
	[ "${DISPLAY_BUNDLE_CONFIG}" == "" ] && \
	[ "${LAST_GEM_LOCK_FILE}" == "" ] && \
	[ "${LOAD_PATH}" == "" ] && \
	[ "${CLEAR_ALL}" == "" ] && \
	[ "${SAVE_CONFIG}" == "" ] && \
	[ "${TEST_LOAD_TIME}" == "" ] && \
	[ "${HELPINFO}" == "" ] && \
	[ "${include_param_passed}" == false ]
then
	echo "You must pass either group names you want to include --OR-- group names you want to exclude."
	Usage
fi

if [ "${INCLUDES}" != "" ] && [ "${EXCLUDES}" != "" ]; then
	echo "You must pass either group names you want to include --OR-- group names you want to exclude , but not both."
	Usage
fi

if [ "${HELPINFO}" == "true" ]; then
    Usage
fi

# --- Helpers ---
function show_bundle_config()
{
	if [ ! -e $BUNDLE_CONFIG_PATH ]; then
		echo "$BUNDLE_CONFIG_PATH does not exit."
	else
		cat $BUNDLE_CONFIG_PATH
	fi
}

function clear_bundle_groups()
{
	[ ! -e $BUNDLE_CONFIG_PATH ] || rm $BUNDLE_CONFIG_PATH || true
	# Remove 
	[ ! -e ~/.bundle/config ] || rm ~/.bundle/config  || true
	[ ! -e ~/.bundle/cache ] || rm -rf ~/.bundle/cache  || true
}

function delete_gemfile_lock()
{
	[ -e ./Gemfile.lock ] && rm ./Gemfile.lock || true
}

function clear_all()
{
	bundle clean --force || true
	clear_bundle_groups
	delete_gemfile_lock
	rm -rf ./vendor || true
}

function timestamp()
{
	echo "$(date +%Y%m%d-%H%M%S)"
}

function save_config()
{
	if [ ! -e ./Gemfile.lock ]; then
		echo >&2 './Gemfile.lock not found.'
		exit 3
	else
		cp Gemfile.lock $CONFIG_DIR/"Gemfile.lock_$(timestamp)"
	fi
}

function all_groups()
{
	if [ ! -e Gemfile ]; then
		echo 'Missing Gemfile!'
	else
		if [ "$ALL_GROUPS" != "" ]; then
			echo "$ALL_GROUPS" | tr ' ' '\n'
		else
			grep -E '^group ' Gemfile | cut -c8-555 | tr ':' ' ' | while read line; do   echo "${line/ do/}"; done | tr ',' '\n' | while read line; do echo "${line}"; done | sort | uniq
		fi
	fi	
}

function all_except_group()
{
	all_except="$1"
	non_excluded_groups=''
	while read line 
	do
		exclude=false
		while read exlude_group 
		do
			if [ "$line" == "$exlude_group" ]; then
				exclude=true
			fi 
		done  < <(echo "$all_except" | tr ' ' '\n')
		if [ "$exclude" != "true" ]; then
			exclude=false			
			non_excluded_groups="$([ "$non_excluded_groups" == "" ] || echo "${non_excluded_groups} ")$line"
		fi
	done < <(echo "$(all_groups)")
	echo "$non_excluded_groups"
}

function run_load_env_script()
{
	echo 'Loading Rails environment...'
	if [ -f $LOAD_ENV_PATH ]; then
		$LOAD_ENV_PATH
	else
		load_env_script_path=$(mktemp)
		echo "#!/usr/bin/env ruby
require File.expand_path('$(pwd)/config/environment.rb',  __FILE__)
puts \"Rails.groups: #{Rails.groups}\"
" > $load_env_script_path
		chmod +x $load_env_script_path
		echo "Created $load_env_script_path"
		$load_env_script_path
	fi
}

function show_load_path()
{
		load_path_script_path=$(mktemp)
		echo "#!/usr/bin/env ruby
require File.expand_path('$(pwd)/config/environment.rb',  __FILE__)
puts \$LOAD_PATH
" > $load_path_script_path
		chmod +x $load_path_script_path
		echo "Created $load_path_script_path"
		$load_path_script_path

}

function last_gemfile_lock_path()
{
	find $CONFIG_DIR -name "Gemfile.lock*" -printf '%T@ %p\n' 2>/dev/null | sort -n | tail -n1 | awk '{print $2}'
}

# BUILD
function build_all()
{
	if [ "$SKIP_BUILD" != "true" ]; then
		echo ">> Build All"
		bundle install --jobs=$(number_of_cpus) --deployment --binstubs=$VENDOR_PATH
	fi
}

function build_without()
{
	if [ "$SKIP_BUILD" != "true" ]; then
		groups_to_exclude="$1"
		if [ "$USE_LAST_LOCK_FILE" == "true" ]; then
			[ -e ./Gemfile.lock ] || cp "$(last_gemfile_lock_path)" "Gemfile.lock_$(timestamp)"
		else 
			clear_bundle_groups # <= Cleanup from bug in Bundler. Remove cruft in $BUNDLE_CONFIG_PATH
		fi
		if [ "$groups_to_exclude" == "" ]; then
			bundle install --jobs=$(number_of_cpus) --deployment --binstubs=$VENDOR_PATH
		else
			bundle install --jobs=$(number_of_cpus) --deployment --binstubs=$VENDOR_PATH --without "$groups_to_exclude"
		fi
	fi
}

# Shows load times. In practice, set the RAILS_GROUPS before you run your Ruby code.
function load_rails_with_groups() 
{
	export RAILS_GROUPS=$(echo "$1" | tr ' ' ',')
	echo ''
	echo '--------------------------------------------------------'
	echo " RAILS_GROUPS=$RAILS_GROUPS"
	echo '--------------------------------------------------------'
	if [[ "$RAILS_GROUPS" == *"test"* ]]; then
		time bundle exec rake environment
	else
		time run_load_env_script
	fi
}

function test_load_time()
{
	if [ "RAILS_ENV" == "test" ]; then
		time bundle exec rake environment
	else
		time run_load_env_script
	fi
}

function number_of_cpus()
{
	if command -v lscpu >/dev/null 2>&1; then
		echo $(lscpu | grep -E '^CPU\(s\):' | awk '{print $2}')
	else
		echo >&2 "I require lscpu but it's not installed.  Defaulting to 4 cores."
		echo 4
	fi
}

# MAIN

unset BUNDLE_INCLUDES
BUNDLE_CONFIG_PATH=./.bundle/config
if [ "$DISPLAY_ALL_GROUPS" == true ]; then
	all_groups
elif [ "$DISPLAY_BUNDLE_CONFIG" == true ]; then
	show_bundle_config
elif [ "$LAST_GEM_LOCK_FILE" == true ]; then
	echo $(last_gemfile_lock_path)
elif [ "$LOAD_PATH" == true ]; then
	show_load_path
elif [ "$CLEAR_ALL" == true ]; then
	clear_all
elif [ "$SAVE_CONFIG" == true ]; then
	save_config
elif [ "$TEST_LOAD_TIME" == true ]; then
	test_load_time
else
	# Build
	clear_all
	bundle install # <= Creates Gemfile.lock filed required by --deployment below
	if [ "$INCLUDE_ALL_GROUPS" == true ]; then
		INCLUDES=$(all_groups | tr '\n' ' ')
		echo "INCLUDES: $INCLUDES"
		build_all
	else
		if [ "$EXCLUDES" != "" ]; then
			INCLUDES=$(all_except_group "$EXCLUDES")
		else
			if [ "$INCLUDES" == "" ] && [ "$include_param_passed" == true ]; then
				INCLUDES=$RAILS_ENV
			fi
			EXCLUDES=$(all_except_group "$INCLUDES")
		fi
		echo "INCLUDES: $INCLUDES"
		echo "EXCLUDES: $EXCLUDES"
		build_without "$EXCLUDES"
	fi
	# Load
	echo "SKIP_BUILD: $SKIP_BUILD"
	echo "SKIP_LOAD: $SKIP_LOAD"
	if [ "$(grep 'Bundler.setup(\*Rails.groups())' config/application.rb | tr -d '[:space:]')" == "Bundler.setup(*Rails.groups())" ]; then
		bundle install --standalone
	fi
	[ ! -z $SKIP_LOAD ] || load_rails_with_groups "$INCLUDES"
fi
